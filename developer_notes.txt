5.4

1.Installing Laravel(Windows)
	* Install Composer on the machine.
	* Install Laravel via Composer (composer create-project --prefer-dist laravel/laravel blog - This command will
		create a laravel project with the name "blog"). Application key will be generated on succesfull installation.
	* run laravel on the browser with the URL "localhost/blog/public".

2.Directory structure 
	* APP > HTTP > MIDDLEWARE - The process which we need to do between request and response.
	* APP - Model (eg: Blog.php)
	* APP > HTTP > CONTROLLERS - Controller
	* CONFIG > APP.PHP - if config values not added to .env file it will take from here. 
	* DATABASE -
	* RESOURCES > VIEWS - if we use frontend in laravel itself
	* ROUTES -
	* STORAGE > LOG - log files (we can configure periods of log in app.php)
	* STORAGE > FRAMEWORK > VIEWS - Caches all the views and stores here
	* CONFIG > DATABASE.PHP - db config
	* .env - if we config in this it will not check for other config files.
	
a. Routes: application means api.php or clientside laravel means web.php
		api.php -> Route:get('user','usercontroller@index')  - if "user" is called invoke "index" method 
				   from "usercontroller" controller.
		web.php -> Route:resource('blog','BlogController') - it will determine which method needs to be invoked.		   
	
3.Configurations

boostrap in laravel - registers the functions 

4.Info
	artisan - is a command line interface (ie. we can create class file using commands...) ( command for listing all
              artisan - php artisan list )
		* php artisan make:controller uvcontroller - creates normal controller with name uvcontroller. Controller name must be in upper camelcase(CustomerController)
		* php artisan make:controller -r uvcontroller - creates controller for rest api with set of functions
		* php artisan make:model Uvmodel - creates normal model with name Uvmodel
		* php artisan make:model /model/Uvmodel - creates normal model with name Uvmodel in the folder model
		* php artisan make:model -m Title - creates migration model (ie. file for the table with the name Title created automatically inside DATABASE > MIGRATIONS)
		* php artisan migrate - migrate the table to db.
		* seeder - to import dummy data

	Restapi controller methods- (Video Part 3)
		index() - get method in rest api
		create() - view method in rest api
		store() - post method in rest api
		show() - get method with individual recored in rest api
		edit() - show method in rest api
		update() -
		destory() - delete method in rest api

1.php artisan config:cache - removes configuration cache, php artisan view:clear - removes view cache
2.we can set the default length of varchar on "AppServiceProvider.php" file.
3.Use "php artisan migrate" to migrate the default tables.
4.*php artisan migrate:rollback - rollback last migration
  *php artisan migrate:reset -  rollback all the migrations
  *php artisan migrate:refresh - rollback all the migration and migrate again
5.php artisan make migration - creates migration table only.
6.controller name must be in upper camelcase(CustomerController)
7.MCR(Model Migration Controller) - php artisan make:model model_name -mcr
8.Soft delete - deletes and keep the data in archieve

Even when the model is deleted manually, the migration's class will still be autoloader by composer. So you have to
remove the migration class loading from vendor/composer/autoload_classmap.php. Maybe "composer dumpautoload" will work.

by default laravel will take the plural of the model class name as table, if we need to manually add the table name, add " protected $table = ‘user’; " to the model.

relationship - table1 primary key is added to the table2 foreign key
albertraj part 5 8.39min
	
5. Eloquent - ORM Model used in laravel	

6. Middleware - Middleware provide a convenient mechanism for filtering HTTP requests entering your application.

Middleware are the easiest way of verifying HTTP requests before they are passed to the controller.

php artisan make:middleware test
STEPS:
a. Create the middleware - creating using artisan and adding funcionalities to the file
b. Register the middleware - registering in kernerl.php
c. Use the middleware - using in route
show the "customer" page only if logged in.

7.DATABASE SEED - php artisan make:seeder CustomerSeeder


Model 
Fillable array
Laravel automatically uses the plural of the model name if added to the migration as table name or else we can define the table name in the model

Accessor - getter
Mutators - setter

Blade
*Master blade file
*Child blade file
 -add @extends( ) to extend(use) the master blade file here and add contents. Master blade file serves as a template now.
-add @yield('name') on the master blade file, the contents added between @section(''name") on the child blade file will be used on the @yield place
*@include will include view

Sending date to view.
1.Controller
$users = ['a','b'];
return view('user.index', compact('users'));
View
{{ $users[0] }}

2.Controller
return view('user.index', ['text' => 'karthik'] );
View
{{ $text }}

3.Controller
return view('user.index' )->with('text', 'karthik');
View
{{ $text }}


Pagination
Controller
Use User::paginate(10); or User::simplePaginate(10);: instead of User::all( ) to retreivew the data, both method does the same but User::paginate(10) will split and display 10 per page.


View
Total records - $users->total( )
Count per page - $users->count( )
Pagination links -  $users->links( )

Validation
1 request validation - validation inside method itself
2 Form request validation - validation in separate class
php artisan make request Store

Tinker - updating, retrieving.... data using command line without mvc

Eloquent
Controller
User::all() - all data
User::find(1) - one data

need to regenerate Composer's autoloader using the dump-autoload command:

**************
GENERAL -
1. CLOUSRE:
function handle(Closure $closure) {
    $closure('Hello World!');
}
handle(function($value){
    echo $value;
});
Which will echo Hello World!


**************

learing2
*api controller
*normal controller
*model create
*insert value to table
*update

learning3
*middleware

POSTMAN albertraj video
https://www.screencast.com/t/QD1btDMYCk3J
https://www.screencast.com/t/GqdCjRr2

CARBON


view layout:

add css, js, images to public folder. you can call it by assest() in your blade

//if logged in go the respective page else redirect to login page. 
    public function handle($request, Closure $next)
    {
         if(Auth::check()) {
            return $next($request);
        }else{
            return redirect('login');
        }
	}
	
****************	
namespaces	

Crct:
namespace App;

use Auth;

class MyController {
    public function index()
    {
        $user = Auth::user();
		//if "use Auth" not used you can use
		 $user = /Auth::user();
    }
}

Wrng:
If you omit the use statement or the backslash, then inside of the MyController (which is inside the App namespace, so the full name of the controller is App\MyController, or equivalently \App\MyController) if you write this:
namespace App;

class MyController {
    public function index()
    {
        // php will now look for the \App\Auth class
        $user = Auth::user();
    }
}

if backward slash not added it will check if namespace exists on within this folder.

------------

// Option one
\DB::select('your stuff here');

// Option two
\Illuminate\Support\Facades\DB::select('your stuff here');

// Option three
use Illuminate\Support\Facades\DB;

DB::select('your stuff here');

// Option four
use DB;

DB::select('your stuff here');


If we add the class without "use" in opton four , it will check relatively to the "namespace"(ie. inside the mentioned namespace)

//
if we added alias on config > app.php  we can simply use "use DB" if not we need to use "use Illuminate\Support\Facades\DB;".
****************
dump one simple variable and die” – dd($var)

$projects = Project::all()->toArray(); - object to array

****************
composer update - checks for composer.json and updates the packages
composer dump auto load - refresh the app(It just regenerates the list of all classes that need to be included in the project (autoload_classmap.php))

install / i#
The install command reads the composer.json file from the current directory, resolves the dependencies, and installs them into vendor.

php composer.phar install
If there is a composer.lock file in the current directory, it will use the exact versions from there instead of resolving them. This ensures that everyone using the library will get the same versions of the dependencies.

If you have Composer installed globally, simply run composer update instead of php composer.phar update.

If there is no composer.lock file, Composer will create one after dependency resolution.

update / u#
In order to get the latest versions of the dependencies and to update the composer.lock file, you should use the update command. This command is also aliased as upgrade as it does the same as upgrade does if you are thinking of apt-get or similar package managers.

php composer.phar update
This will resolve all dependencies of the project and write the exact versions into composer.lock.

self-update – which updates the composer.phar file to the latest version

If you only want to update a few packages and not all, you can list them as such:

php composer.phar update vendor/package vendor/package2
You can also use wildcards to update a bunch of packages at once:

php composer.phar update vendor/*

require#
The require command adds new packages to the composer.json file from the current directory. If no file exists one will be created on the fly.

php composer.phar require
After adding/changing the requirements, the modified requirements will be installed or updated

outdated#
The outdated command shows a list of installed packages that have updates available, including their current and latest versions. This is basically an alias for composer show -lo.

dump-autoload (dumpautoload)#
If you need to update the autoloader because of new classes in a classmap package for example, you can use dump-autoload to do that without having to go through an install or update.

***First try composer update . It will update all dependencies but in case it doesn’t work delete vendor folder of your project and type composer install and run in cli which again add dependencies.

packagist - repo for composer

composer status – Shows a list of dependencies that have been modified locally. If we install something from the source (using the --prefer-source option), we will end up with a clone of that package in the /vendor folder. If we make some changes to that package, the composer status command will show us a git status for those changes.

************

1. composer require <package>. This command will not only create the composer.json file, it will also download all the dependencies specified. - use composer search <package name> and composer require to download.

2. If you used composer init or the manual method, you need to run composer install. This will download all the dependencies needed for the packages described in the composer.json file. - add the required file to composer.json file and then composer install

Note that writing the file manually and then running composer install is the same as running composer require <package>.

Using the composer require <package> approach is a recommended best practice.

composer init will launch the wizard. The wizard will guide us through the generation of our composer.json file. - creating a composer.json file using command

*************
*composer update

composer update will update your depencencies as they are specified in composer.json

composer update will:

Read composer.json
Remove installed packages that are no more required in composer.json
Check the availability of the latest versions of your required packages
Install the latest versions of your packages
Update composer.lock to store the installed packages version

*composer install

composer install will not update anything; it will just install all the dependencies as specified in the composer.lock file

In detail:

Check if composer.lock file exists (if not, run composer-update and create it)
Read composer.lock file
Install the packages specified in the composer.lock file

*When to install and when to update

composer update is mostly used in the 'development phase', to upgrade our project packages according to what we have specified in the composer.json file,

composer install is primarily used in the 'deploying phase' to install our application on a production server or on a testing environment, using the same dependencies stored in the composer.lock file created by composer update.

************

canvasJS - https://canvasjs.com/jquery-charts/

************

php artisan help make:model - get help for creating model

RELATIONSHIP
*One To One 

View actual SQL queries before migration in laravel
php artisan migrate --pretend

How to check current URL in Laravel 5
Request::fullUrl()

    // example urls
    // kodementor.com/dashboard/post/this-is-test-post
 
    @if (Request::segment(4) == 'some-text')
        // Note:
        // segment(1)  == 'dashboard'
        // segment(2)  == 'post'
        // segment(3)  == 'this-is-test-post'
        // and so on
    @endif

****	
Laravel facade is a class that gives access to the object of any container.
****	
A method is a function that belongs to a class.

class MyClass
{
     public function this_is_a_method() { }
}
A trait is a means of sharing code between classes. A trait cannot be instantiated, but rather is included into another class. Both classes and traits can define methods.

trait MyTrait
{
     public function this_is_a_method() { }
}
Now that I have this trait I can update MyClass to use this trait.

class MyClass
{
     use MyTrait;
}
You can think of traits as copy and paste. Now MyClass copies the methods defined in MyTrait so you can do this.

$class = new MyClass();
$class->this_is_a_method();
Both methods and traits are features of PHP. 	
****	

SERVICE PROVIDER -
The function we writing is the service.
Service container - is a bag that has all the objects of the application
For custom provider, create provider using artisan cmd and we need to say laravel to bind this to the service container.


request life cycle:
public/index.php
- loads composer generated autoloader definition.
- bootstrap/app.php instance of application/service container
app/Http/Kernel.php
- error handling, checking env, common middleware
-route
-route specific middleware
-controller

A singleton is a particular kind of class that, can be instantiated only once.

*How check if some package installed:

composer show // show all installed pacgages

composer show nesbot/carbon // show specific package


------------

5.5 - laravel auto pacgage discover, no need to inculde in provide and alias manually when adding new package.

https://medium.com/vandium-software/5-easy-steps-to-understanding-json-web-tokens-jwt-1164c0adfcec

https://blog.pusher.com/laravel-jwt/

------------

if we use folder inside to add controller, we need to use folder name infront of route in web.php

What does the route::middleware('auth:api') do? It states that the route should implement the middleware "auth" and the middleware group "api".




https://www.5balloons.info/user-role-based-authentication-and-access-control-in-laravel/

https://www.5balloons.info/multi-page-step-form-in-laravel-with-validation/


https://medium.freecodecamp.org/how-to-create-and-publish-a-chrome-extension-in-20-minutes-6dc8395d7153
https://medium.freecodecamp.org/how-to-create-a-chrome-extension-part-1-ad2a3a77541
https://www.youtube.com/watch?v=wHZCYi1K664
https://stackoverflow.com/questions/42708162/chrome-extension-passing-form-information-to-a-php-file